package ${rootPackage}${module}.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cattsoft.baseplatform.core.entity.PagingQueryBean;
import com.cattsoft.baseplatform.core.entity.PagingResultBean;
import ${rootPackage}${module}.component.${upperTableName}Component;
import ${rootPackage}${module}.entity.${upperTableName};
import ${rootPackage}${module}.service.${upperTableName}Service;
import ${rootPackage}${module}.entity.querybean.${upperTableName}QB;

@Service("${lowerTableName}Service")
@Transactional
public class ${upperTableName}ServiceImpl implements ${upperTableName}Service {
	@Autowired
	private ${upperTableName}Component ${lowerTableName}Component;

	@Override
	@Transactional(readOnly = true)
	public PagingResultBean<List<${upperTableName}>> queryPageList(PagingQueryBean<${upperTableName}QB> pagingQueryBean) throws Exception {
		return ${lowerTableName}Component.queryPageList(pagingQueryBean);
	}

#if(${hasPrimaryKey})
	@Override
	@Transactional
	public int deleteByPrimaryKey(${upperTableName} ${lowerTableName}) throws Exception {
		return ${lowerTableName}Component.deleteByPrimaryKey(${lowerTableName});
	}

#end
	@Override
	@Transactional
	public int insert(${upperTableName} ${lowerTableName}) throws Exception {
		return ${lowerTableName}Component.insert(${lowerTableName});
	}

	@Override
	@Transactional
	public int insertSelective(${upperTableName} ${lowerTableName}) throws Exception {
		return ${lowerTableName}Component.insertSelective(${lowerTableName});
	}

#if(${hasPrimaryKey})
	@Override
	@Transactional(readOnly = true)
	public ${upperTableName} selectByPrimaryKey(${upperTableName} ${lowerTableName}) throws Exception {
		return ${lowerTableName}Component.selectByPrimaryKey(${lowerTableName});
	}

#end
#if(${hasPrimaryKey})
	@Override
	@Transactional
	public int updateByPrimaryKeySelective(${upperTableName} ${lowerTableName}) throws Exception {
		return ${lowerTableName}Component.updateByPrimaryKeySelective(${lowerTableName});
	}

#end
#if(${hasPrimaryKey})
	@Override
	@Transactional
	public int updateByPrimaryKey(${upperTableName} ${lowerTableName}) throws Exception {
		return ${lowerTableName}Component.updateByPrimaryKey(${lowerTableName});
	}
#end

	/*************************************************************/
	/*                      setter and getter                    */
	/*************************************************************/
	
	public void set${upperTableName}Component(${upperTableName}Component ${lowerTableName}Component) {
		this.${lowerTableName}Component = ${lowerTableName}Component;
	}

}
